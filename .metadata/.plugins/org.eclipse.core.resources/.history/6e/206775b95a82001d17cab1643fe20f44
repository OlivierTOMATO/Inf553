package edu.polytechnique.inf553;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebInitParam;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class QueryServlet
 */
@WebServlet(
		urlPatterns = { "/QueryServlet" }, 
		initParams = { 
				@WebInitParam(name = "year", value = "", description = "A year on which the query is based")
		})
public class QueryServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public QueryServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.setContentType("text/html;charset=UTF-8");
//		
		System.out.print(request.getParameter("year"));
        int year = Integer.parseInt(request.getParameter("year"));
        
        if(year >= 2050) {
        	throw new IllegalArgumentException("Year should be smaller than 2050");
        }
		
		String url="jdbc:postgresql://localhost:5432/postgres";
		String user="linzhuoyao"; 
		String password="admin";
		try {
		Class.forName("org.postgresql.Driver");


		con=DriverManager.getConnection(url,user,password);
		String sql = "SELECT p.id, p.name, count(*)\r\n"
				+ "				FROM cast_info AS c, person AS p, movie AS m, role_type AS r\r\n"
				+ "				WHERE c.person_id = p.id\r\n"
				+ "				and c.movie_id = m.id\r\n"
				+ "				and c.role_id = r.id\r\n"
				+ "				and( r.role = 'actor' \r\n"
				+ "				or  r.role = 'actress')\r\n"
				+ "				and m.production_year = ?\r\n"
				+ "				group by p.id;";
		int count = DBUtil.getCount(sql);
		
		String sql2 = "SELECT p.id, p.name, count(*)\r\n"
				+ "				FROM cast_info AS c, person AS p, movie AS m, role_type AS r\r\n"
				+ "				WHERE c.person_id = p.id\r\n"
				+ "				and c.movie_id = m.id\r\n"
				+ "				and c.role_id = r.id\r\n"
				+ "				and( r.role = 'actor' \r\n"
				+ "				or  r.role = 'actress')\r\n"
				+ "				and m.production_year = ?\r\n"
				+ "				group by p.id\r\n"
				+ " 			limit ?, ?;";
		
		
		Object[] params = {year, (currentPage-1)*pageSize,pageSize};
		DBUtil.executeQuery(sql2, Params);
		
		try {
			while(rs.next()) {
				int no = rs.getInt("no");
				String name = rs.getString("name");
				int age = rs.getInt("age");
				String address = rs.getString("address");
				student = new Student(no,name,age,address);
				students.add(student);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			DBUtil.closeAll(rs, DBUtil.pstmt, DBUtil.con);
		}
		
		
		}catch(Exception e){
			e.printStackTrace();
			System.out.print("error");
		}finally {
		}
		


		response.getWriter().append("Served at: ").append(request.getContextPath());
	 
	}

}
